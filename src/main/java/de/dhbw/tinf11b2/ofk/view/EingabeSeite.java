package de.dhbw.tinf11b2.ofk.view;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.Page;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TextField;

import de.dhbw.tinf11b2.ofk.presenter.OFKViewListener;

public class EingabeSeite extends CustomComponent implements OFKView,
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	List<OFKViewListener> listeners = new ArrayList<OFKViewListener>();
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private Button zurueckButton;
	@AutoGenerated
	private GridLayout eingabeLayout;
	@AutoGenerated
	private Button speicherButton;
	@AutoGenerated
	private Button neuButton;
	@AutoGenerated
	private TextField geldFeld_4;
	@AutoGenerated
	private ComboBox kategorieBox_4;
	@AutoGenerated
	private ComboBox kontoBox_4;
	@AutoGenerated
	private TextField geldFeld_3;
	@AutoGenerated
	private ComboBox kategorieBox_3;
	@AutoGenerated
	private ComboBox kontoBox_3;
	@AutoGenerated
	private TextField geldFeld_2;
	@AutoGenerated
	private ComboBox kategorieBox_2;
	@AutoGenerated
	private ComboBox kontoBox_2;
	@AutoGenerated
	private TextField geldFeld_1;
	@AutoGenerated
	private ComboBox kategorieBox_1;
	@AutoGenerated
	private ComboBox kontoBox_1;
	@AutoGenerated
	private Label werteLabel;
	@AutoGenerated
	private Label kategorieLabel;
	@AutoGenerated
	private Label kontoLable;
	@AutoGenerated
	private Label beschreibungslabel;
	

	private Notification speicherNotification;

	private StandardElement elemente = new StandardElement();
	private Koordinaten koordinaten = new Koordinaten();
	private String blank = koordinaten.empty();
	private String beschreibung;

	boolean isEinnahme;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public EingabeSeite(String beschreibung, boolean isEinnahme) {
		this.isEinnahme = isEinnahme;
		this.beschreibung = beschreibung;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = elemente.absoluteGen();

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// beschreibungslabel
		beschreibungslabel = elemente.beschrGen();
		beschreibungslabel.setValue(beschreibung);
		mainLayout.addComponent(beschreibungslabel, koordinaten.getLabel() );

		// eingabeLayout
		eingabeLayout = buildEingabeLayout();
		mainLayout.addComponent(eingabeLayout, koordinaten.getMain() );

		// zurueckButton
		zurueckButton = elemente.zurueckGen();
		zurueckButton.addClickListener(this);
		mainLayout.addComponent(zurueckButton, koordinaten.getZurueck() );

		return mainLayout;
	}

	@AutoGenerated
	private GridLayout buildEingabeLayout() {
		// common part: cremany-to-oneate layout
		eingabeLayout = new GridLayout();
		eingabeLayout.setImmediate(false);
		eingabeLayout.setWidth("100.0%");
		eingabeLayout.setHeight("90.0%");
		eingabeLayout.setMargin(false);
		eingabeLayout.setColumns(3);
		eingabeLayout.setRows(6);

		// kontoLable
		kontoLable = elemente.labelGen();
		kontoLable.setValue("Konto");
		eingabeLayout.addComponent(kontoLable, 0, 0);
		eingabeLayout.setComponentAlignment(kontoLable, new Alignment(10));

		// kategorieLabel
		kategorieLabel = elemente.labelGen();
		kategorieLabel.setValue("Kategorie");
		eingabeLayout.addComponent(kategorieLabel, 1, 0);
		eingabeLayout.setComponentAlignment(kategorieLabel, new Alignment(24));

		// werteLabel
		werteLabel =elemente.labelGen();
		werteLabel.setValue("Wert");
		eingabeLayout.addComponent(werteLabel, 2, 0);
		eingabeLayout.setComponentAlignment(werteLabel, new Alignment(9));

		// neuButton
		neuButton = elemente.buttonGen();
		neuButton.setCaption("Neue Kategorie");
		neuButton.setEnabled(false);
		neuButton.addClickListener(this);
		eingabeLayout.addComponent(neuButton, 0, 5);
		eingabeLayout.setComponentAlignment(neuButton, new Alignment(48));

		// speicherButton
		speicherButton = elemente.buttonGen();
		speicherButton.setCaption("Werte Speichern");
		speicherButton.addClickListener(this);
		eingabeLayout.addComponent(speicherButton, 2, 5);
		eingabeLayout.setComponentAlignment(speicherButton, new Alignment(48));
		return eingabeLayout;
	}

	@Override
	public void addListener(OFKViewListener listener) {
		listeners.add(listener);

	}

	@SuppressWarnings("deprecation")
	public void bestaetige() {

		speicherNotification = new Notification("Daten Sichern",
				"<br/>Eingaben Erfolgreich gespeichert",
				Notification.TYPE_HUMANIZED_MESSAGE, true);
		speicherNotification.setStyleName("positiv");
		speicherNotification.show(Page.getCurrent());
	}
	
	@SuppressWarnings("deprecation")
	public void warne(int i, String wert) {
		
	
			speicherNotification = new Notification("Daten Sichern",
					"<br/> Eingaben in Zeile: "+ i+" nicht erfolgreich bitte nur"+ wert+ "Zahlen eingeben",Notification.TYPE_WARNING_MESSAGE,true
					);
		
		speicherNotification.setStyleName("negativ");
		speicherNotification.show(Page.getCurrent());
	}
	@SuppressWarnings("deprecation")
	public void eingabeFehler(int i) {

		speicherNotification = new Notification("Daten falsch eingegeben",
				"<br/> Bitte Eingaben Pr√ºfen, eines der Felder in Zeile "+i + " ist leer",Notification.TYPE_WARNING_MESSAGE,true
				);
		speicherNotification.setStyleName("negativ");
		speicherNotification.show(Page.getCurrent());
	}
	@SuppressWarnings("deprecation")
	public void eingabeLeer() {

		speicherNotification = new Notification("Keine Daten eingegeben",
				"<br/> Bitte Werte eingeben, die Eingabemaske ist Leer",Notification.TYPE_WARNING_MESSAGE,true
				);
		speicherNotification.setStyleName("negativ");
		speicherNotification.show(Page.getCurrent());
	}

	@Override
	public void buttonClick(ClickEvent event) {

		for (OFKViewListener listener : listeners)
			listener.buttonClick(event.getButton().getCaption());

	}

	
	public boolean isEinnahme() {
		return this.isEinnahme;
	}

	public void feldErstellung(String[] konten, String[] kategorien) {

		// kontoBox_1
		kontoBox_1 = comboErstellung(konten);
		eingabeLayout.addComponent(kontoBox_1, 0, 1);
		eingabeLayout.setComponentAlignment(kontoBox_1, new Alignment(34));

		// kategorieBox_1
		kategorieBox_1 = comboErstellung(kategorien);
		eingabeLayout.addComponent(kategorieBox_1, 1, 1);
		eingabeLayout.setComponentAlignment(kategorieBox_1, new Alignment(48));

		// geldFeld_1
		geldFeld_1 = elemente.textGen();
		eingabeLayout.addComponent(geldFeld_1, 2, 1);
		eingabeLayout.setComponentAlignment(geldFeld_1, new Alignment(33));

		// kontoBox_2
		kontoBox_2 = comboErstellung(konten);
		eingabeLayout.addComponent(kontoBox_2, 0, 2);
		eingabeLayout.setComponentAlignment(kontoBox_2, new Alignment(34));

		// kategorieBox_2
		kategorieBox_2 = comboErstellung(kategorien);
		eingabeLayout.addComponent(kategorieBox_2, 1, 2);
		eingabeLayout.setComponentAlignment(kategorieBox_2, new Alignment(48));

		// geldFeld_2
		geldFeld_2 = elemente.textGen();
		eingabeLayout.addComponent(geldFeld_2, 2, 2);
		eingabeLayout.setComponentAlignment(geldFeld_2, new Alignment(33));

		// kontoBox_3
		kontoBox_3 = comboErstellung(konten);
		eingabeLayout.addComponent(kontoBox_3, 0, 3);
		eingabeLayout.setComponentAlignment(kontoBox_3, new Alignment(34));

		// kategorieBox_3
		kategorieBox_3 = comboErstellung(kategorien);
		eingabeLayout.addComponent(kategorieBox_3, 1, 3);
		eingabeLayout.setComponentAlignment(kategorieBox_3, new Alignment(48));

		// geldFeld_3
		geldFeld_3 = elemente.textGen();
		eingabeLayout.addComponent(geldFeld_3, 2, 3);
		eingabeLayout.setComponentAlignment(geldFeld_3, new Alignment(33));

		// kontoBox_4
		kontoBox_4 = comboErstellung(konten);
		eingabeLayout.addComponent(kontoBox_4, 0, 4);
		eingabeLayout.setComponentAlignment(kontoBox_4, new Alignment(34));

		// kategorieBox_4
		kategorieBox_4 = comboErstellung(kategorien);
		eingabeLayout.addComponent(kategorieBox_4, 1, 4);
		eingabeLayout.setComponentAlignment(kategorieBox_4, new Alignment(48));

		// geldFeld_4
		geldFeld_4 = elemente.textGen();
		eingabeLayout.addComponent(geldFeld_4, 2, 4);
		eingabeLayout.setComponentAlignment(geldFeld_4, new Alignment(33));
	}

	private ComboBox comboErstellung(String[] Art) {
		ComboBox erstellung = elemente.comboGen();
		for (String name : Art) {
			erstellung.addItem(name);
		}

		return erstellung;
	}

	public String[] getGeldFieldValue() {
		String[] geldWerte = new String[4];
		if (!geldFeld_1.getValue().equals("")) {
			geldWerte[0] = geldFeld_1.getValue();
		} else {
			geldWerte[0] = blank;
		}
		if (!geldFeld_2.getValue().equals("")) {
			geldWerte[1] = geldFeld_2.getValue();
		} else {
			geldWerte[1] = blank;
		}
		if (!geldFeld_3.getValue().equals("")) {
			geldWerte[2] = geldFeld_3.getValue();
		} else {
			geldWerte[2] = blank;
		}
		if (!geldFeld_4.getValue().equals("")) {
			geldWerte[3] = geldFeld_4.getValue();
		} else {
			geldWerte[3] = blank;
		}
		return geldWerte;
	}

	public String[] getKategorieFieldValue() {
		String[] kategorieWerte = new String[4];
		if (kategorieBox_1.getValue() != null) {
			kategorieWerte[0] = (String) kategorieBox_1.getValue();
		} else {
			kategorieWerte[0] = blank;
		}
		if (kategorieBox_2.getValue() != null) {
			kategorieWerte[1] = (String) kategorieBox_2.getValue();
		} else {
			kategorieWerte[1] = blank;
		}
		if (kategorieBox_3.getValue() != null) {
			kategorieWerte[2] = (String) kategorieBox_3.getValue();
		} else {
			kategorieWerte[2] = blank;
		}
		if (kategorieBox_4.getValue() != null) {
			kategorieWerte[3] = (String) kategorieBox_4.getValue();
		} else {
			kategorieWerte[3] = blank;
		}
		return kategorieWerte;
	}

	public String[] getKontoFieldValue() {
		String[] kontoWerte = new String[4];
		if (kontoBox_1.getValue() != null) {
			kontoWerte[0] = (String) kontoBox_1.getValue();
		} else {
			kontoWerte[0] = blank;
		}
		if (kontoBox_2.getValue() != null) {
			kontoWerte[1] = (String) kontoBox_2.getValue();
		} else {
			kontoWerte[1] = blank;
		}
		if (kontoBox_3.getValue() != null) {
			kontoWerte[2] = (String) kontoBox_3.getValue();
		} else {
			kontoWerte[2] = blank;
		}
		if (kontoBox_4.getValue() != null) {
			kontoWerte[3] = (String) kontoBox_4.getValue();
		} else {
			kontoWerte[3] = blank;
		}
		return kontoWerte;
	}

}
