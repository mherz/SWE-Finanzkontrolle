package de.dhbw.tinf11b2.ofk.view;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.addon.charts.model.ListSeries;
import com.vaadin.addon.charts.model.XAxis;
import com.vaadin.addon.charts.model.YAxis;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.TabSheet;

import de.dhbw.tinf11b2.ofk.presenter.OFKViewListener;

public class UeberblickSeite extends CustomComponent implements OFKView,
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */

	List<OFKViewListener> listeners = new ArrayList<OFKViewListener>();
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TabSheet ubersichtSheet;
	@AutoGenerated
	private AbsoluteLayout ausgabenLayout;
	@AutoGenerated
	private NativeSelect chartSelect;
	@AutoGenerated
	private NativeSelect kategorieSelect;
	@AutoGenerated
	private AbsoluteLayout gesamtLayout;

	@AutoGenerated
	private AbsoluteLayout einnahmenLayout;
	@AutoGenerated
	private Button zurueckButton;
	@AutoGenerated
	private Label uebersichtLabel;

	private Button wechselButton;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * @param finanzkontrolleUI
	 */
	public UeberblickSeite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		//
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// uebersichtLabel
		uebersichtLabel = new Label();
		uebersichtLabel.setImmediate(false);
		uebersichtLabel.setWidth("-1px");
		uebersichtLabel.setHeight("-1px");
		uebersichtLabel.setValue("Übersicht");
		mainLayout.addComponent(uebersichtLabel, "top:0.0px;left:120.0px;");

		// wechselButton
		wechselButton = new Button("Wechsel", this);
		wechselButton.setImmediate(false);
		wechselButton.setWidth("-1px");
		wechselButton.setHeight("-1px");

		// ubersichtSheet
		ubersichtSheet = buildUbersichtSheet();
		mainLayout.addComponent(ubersichtSheet, "top:10%;left:0%;");

		// zurueckButton
		zurueckButton = new Button("Zurück", this);
		zurueckButton.setImmediate(false);
		zurueckButton.setWidth("-1px");
		zurueckButton.setHeight("-1px");
		mainLayout.addComponent(zurueckButton, "top:92.0%;left:90.0%;");

		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildUbersichtSheet() {
		// common part: create layout
		ubersichtSheet = new TabSheet();
		ubersichtSheet.setImmediate(true);
		ubersichtSheet.setWidth("100.0%");
		ubersichtSheet.setHeight("90.0%");

		// verticalLayout_1
		einnahmenLayout = buildEinnahmenLayout();
		ubersichtSheet.addTab(einnahmenLayout, "Einnahmen Uebersicht", null);

		// gesamtUebersicht
		gesamtLayout = buildGesamtLayout();
		ubersichtSheet.addTab(gesamtLayout, "Gesamt Uebersicht", null);

		// verticalLayout_2
		ausgabenLayout = buildAusgabenLayout();
		ubersichtSheet.addTab(ausgabenLayout, "Ausgaben Uebersicht", null);

		return ubersichtSheet;
	}

	@AutoGenerated
	private AbsoluteLayout buildEinnahmenLayout() {
		// common part: create layout
		einnahmenLayout = new AbsoluteLayout();
		einnahmenLayout.setImmediate(false);
		einnahmenLayout.setWidth("100.0%");
		einnahmenLayout.setHeight("100.0%");

		// nativeSelect_1
		chartSelect = new NativeSelect();
		chartSelect.setCaption("Chart Art");
		chartSelect.setImmediate(false);
		chartSelect.setWidth("-1px");
		chartSelect.setHeight("-1px");
		fillSelect();
		einnahmenLayout.addComponent(chartSelect, "top:5.0%;left:0.0%;");
		einnahmenLayout.addComponent(wechselButton, "top:92.0%;left:90.0%;");
		return einnahmenLayout;
	}

	@AutoGenerated
	private AbsoluteLayout buildGesamtLayout() {
		// common part: create layout
		gesamtLayout = new AbsoluteLayout();
		gesamtLayout.setImmediate(false);
		gesamtLayout.setWidth("100.0%");
		gesamtLayout.setHeight("100.0%");

		// nativeSelect_1
		chartSelect = new NativeSelect();
		chartSelect.setCaption("Chart Art");
		chartSelect.setImmediate(false);
		chartSelect.setWidth("-1px");
		chartSelect.setHeight("-1px");
		fillSelect();
		gesamtLayout.addComponent(chartSelect, "top:5.0%;left:0.0%;");
		gesamtLayout.addComponent(wechselButton, "top:92.0%;left:90.0%;");

		return gesamtLayout;
	}

	@AutoGenerated
	private AbsoluteLayout buildAusgabenLayout() {
		// common part: create layout
		ausgabenLayout = new AbsoluteLayout();
		ausgabenLayout.setImmediate(false);
		ausgabenLayout.setWidth("100.0%");
		ausgabenLayout.setHeight("100.0%");

		// nativeSelect_1
		chartSelect = new NativeSelect();
		chartSelect.setCaption("Chart Art");
		chartSelect.setImmediate(false);
		chartSelect.setWidth("-1px");
		chartSelect.setHeight("-1px");
		fillSelect();
		ausgabenLayout.addComponent(chartSelect, "top:5.0%;left:0.0%;");
		ausgabenLayout.addComponent(wechselButton, "top:92.0%;left:90.0%;");
		
		return ausgabenLayout;
	}

	@Override
	public void addListener(OFKViewListener listener) {
		listeners.add(listener);

	}

	@Override
	public void buttonClick(ClickEvent event) {
		System.out.println(event.getButton().getCaption());
		for (OFKViewListener listener : listeners)
			listener.buttonClick(event.getButton().getCaption());

	}

	private void fillSelect() {
		// TODO Auto-generated method stub
		chartSelect.addItem("GesamtÜberblick");
		chartSelect.addItem("ZeitÜberblick");
	}

	public void wechselDich() {

		Chart chart;

		if (ubersichtSheet.getSelectedTab() == ausgabenLayout) {
			chart = setChart(kategorieSelect, chartSelect,ausgabenLayout);
			ausgabenLayout.addComponent(chart, "top:10.0%;left:0.0%;");
			// Chart
			if (chartSelect.isSelected("GesamtÜberblick")) {
				kategorieSelect = new NativeSelect();
				kategorieSelect.setCaption("Kategorie");
				kategorieSelect.setImmediate(false);
				kategorieSelect.setWidth("250px");
				kategorieSelect.setHeight("-1px");
				ausgabenLayout.addComponent(kategorieSelect, "top:92.0%;left:0.0%");
		}

		else if (ubersichtSheet.getSelectedTab() == einnahmenLayout) {
			chart = setChart(kategorieSelect, chartSelect, einnahmenLayout);
			einnahmenLayout.addComponent(chart, "top:10.0%;left:0.0%;");
			// Chart
			if (chartSelect.isSelected("GesamtÜberblick")) {
				kategorieSelect = new NativeSelect();
				kategorieSelect.setCaption("Kategorie");
				kategorieSelect.setImmediate(false);
				kategorieSelect.setWidth("250px");
				kategorieSelect.setHeight("-1px");
				ausgabenLayout.addComponent(kategorieSelect, "top:92.0%;left:0.0%");
			}

		} else if (ubersichtSheet.getSelectedTab() == gesamtLayout) {
			chart = setChart(kategorieSelect, chartSelect,gesamtLayout);
			gesamtLayout.addComponent(chart, "top:10.0%;left:0.0%;");
			// Chart
			if (chartSelect.isSelected("ZeitÜberblick")) {
				kategorieSelect = new NativeSelect();
				kategorieSelect.setCaption("Kategorie");
				kategorieSelect.setImmediate(false);
				kategorieSelect.setWidth("250px");
				kategorieSelect.setHeight("-1px");
				ausgabenLayout.addComponent(kategorieSelect, "top:92.0%;left:0.0%");
			}
		}}

	}

	private Chart setChart(NativeSelect kategorie, NativeSelect chartArt, AbsoluteLayout gesamtLayout2) {
		Chart chart = new Chart(ChartType.BAR);
		chart.setWidth("400px");
		chart.setHeight("300px");
		// Modify the default configuration a bit
		Configuration conf = chart.getConfiguration();
		conf.setTitle("Planets");
		conf.setSubTitle("The bigger they are the harder they pull");
		conf.getLegend().setEnabled(false); // Disable legend
		// The data

		ListSeries series = new ListSeries("Diameter");
		series.setData(4900, 12100, 12800, 6800, 143000, 125000, 51100, 49500);
		conf.addSeries(series);
		// Set the category labels on the axis correspondingly
		XAxis xaxis = new XAxis();
		xaxis.setCategories("Mercury", "Venus", "Earth", "Mars", "Jupiter",
				"Saturn", "Uranus", "Neptune");
		xaxis.setTitle("Planet");
		conf.addxAxis(xaxis);
		// Set the Y axis title
		YAxis yaxis = new YAxis();
		yaxis.setTitle("Diameter");
		yaxis.getLabels().setFormatter(
				"function() {return Math.floor(this.value/1000) + \'Mm\';}");
		yaxis.getLabels().setStep(2);
		conf.addyAxis(yaxis);
		return chart;
	}

}