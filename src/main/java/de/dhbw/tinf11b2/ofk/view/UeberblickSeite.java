package de.dhbw.tinf11b2.ofk.view;

import java.util.ArrayList;
import java.util.List;

import com.vaadin.addon.charts.Chart;
import com.vaadin.addon.charts.model.ChartType;
import com.vaadin.addon.charts.model.Configuration;
import com.vaadin.addon.charts.model.ListSeries;
import com.vaadin.addon.charts.model.XAxis;
import com.vaadin.addon.charts.model.YAxis;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.ListSelect;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Notification.Type;
import com.vaadin.ui.TabSheet;

import de.dhbw.tinf11b2.ofk.model.pojo.Category;
import de.dhbw.tinf11b2.ofk.model.pojo.Income;
import de.dhbw.tinf11b2.ofk.presenter.OFKViewListener;

public class UeberblickSeite extends CustomComponent implements OFKView,
		ClickListener {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * 
	 */

	List<OFKViewListener> listeners = new ArrayList<OFKViewListener>();
	private static final long serialVersionUID = 1L;
	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TabSheet ubersichtSheet;
	@AutoGenerated
	private AbsoluteLayout ausgabenLayout;
	@AutoGenerated
	private ListSelect chartSelect;
	@AutoGenerated
	private NativeSelect zeitraumSelect;
	@AutoGenerated
	private AbsoluteLayout gesamtLayout;

	@AutoGenerated
	private AbsoluteLayout einnahmenLayout;
	@AutoGenerated
	private Button zurueckButton;
	@AutoGenerated
	private Label uebersichtLabel;

	private Button wechselButton;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 * 
	 * @param finanzkontrolleUI
	 */
	public UeberblickSeite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// uebersichtLabel
		uebersichtLabel = new Label();
		uebersichtLabel.setImmediate(false);
		uebersichtLabel.setWidth("-1px");
		uebersichtLabel.setHeight("-1px");
		uebersichtLabel.setValue("Übersicht");
		mainLayout.addComponent(uebersichtLabel, "top:0.0px;left:120.0px;");

		// ubersichtSheet
		ubersichtSheet = buildUbersichtSheet();
		mainLayout.addComponent(ubersichtSheet, "top:10%;left:0%;");

		// zurueckButton
		zurueckButton = new Button("Zurück", this);
		zurueckButton.setImmediate(false);
		zurueckButton.setWidth("-1px");
		zurueckButton.setHeight("-1px");
		mainLayout.addComponent(zurueckButton, "top:92.0%;left:90.0%;");

		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildUbersichtSheet() {
		// common part: create layout
		ubersichtSheet = new TabSheet();
		ubersichtSheet.setImmediate(true);
		ubersichtSheet.setWidth("100.0%");
		ubersichtSheet.setHeight("90.0%");

		// verticalLayout_1
		einnahmenLayout = buildEinnahmenLayout();
		ubersichtSheet.addTab(einnahmenLayout, "Einnahmen Uebersicht", null);

		// gesamtUebersicht
		gesamtLayout = buildGesamtLayout();
		ubersichtSheet.addTab(gesamtLayout, "Gesamt Uebersicht", null);

		// verticalLayout_2
		ausgabenLayout = buildAusgabenLayout();
		ubersichtSheet.addTab(ausgabenLayout, "Ausgaben Uebersicht", null);

		return ubersichtSheet;
	}

	@AutoGenerated
	private AbsoluteLayout buildEinnahmenLayout() {
		// common part: create layout
		einnahmenLayout = new AbsoluteLayout();
		einnahmenLayout.setImmediate(false);
		einnahmenLayout.setWidth("100.0%");
		einnahmenLayout.setHeight("100.0%");
		chartSelect = selection();
		einnahmenLayout.addComponent(chartSelect, "top:5.0%;left:0.0%;");
		einnahmenLayout.addComponent(new Button("WechselE", this),
				"top:92.0%;left:90.0%;");
		return einnahmenLayout;
	}

	@AutoGenerated
	private AbsoluteLayout buildGesamtLayout() {
		// common part: create layout
		gesamtLayout = new AbsoluteLayout();
		gesamtLayout.setImmediate(false);
		gesamtLayout.setWidth("100.0%");
		gesamtLayout.setHeight("100.0%");
		chartSelect = selection();
		gesamtLayout.addComponent(chartSelect, "top:5.0%;left:0.0%;");
		gesamtLayout.addComponent(new Button("WechselG", this),
				"top:92.0%;left:90.0%;");

		return gesamtLayout;
	}

	@AutoGenerated
	private AbsoluteLayout buildAusgabenLayout() {
		// common part: create layout
		ausgabenLayout = new AbsoluteLayout();
		ausgabenLayout.setImmediate(false);
		ausgabenLayout.setWidth("100.0%");
		ausgabenLayout.setHeight("100.0%");
		chartSelect = selection();

		ausgabenLayout.addComponent(chartSelect, "top:5.0%;left:0.0%;");
		ausgabenLayout.addComponent(new Button("WechselA"), "top:92.0%;left:90.0%;");

		return ausgabenLayout;
	}

	@Override
	public void addListener(OFKViewListener listener) {
		listeners.add(listener);

	}

	@Override
	public void buttonClick(ClickEvent event) {
		System.out.println("Ich bin geklickt "+ this.toString()+ " "+ this.getCaption());
		for (OFKViewListener listener : listeners)
			listener.buttonClick(event.getButton().getCaption());

	}

	private void fillSelect() {

		chartSelect.addItem("GesamtÜberblick");
		chartSelect.addItem("ZeitUberblick");
		chartSelect.setItemCaption("ZeitUberblick", "Zeitübersicht");
		chartSelect.setDescription("Select Box");
		chartSelect.setValue("GesamtÜberblick");
		chartSelect.setImmediate(true);
	}

	private Chart setChartBar(String[] kategorien, Double[] werte, String name) {
		String[] test3 = { "Auto", "Bahn", "Fahrrad", "Motorrad" };
		Double[] test4 = { 112D, 211D, 118D, 119D };
		Double[] test5 = { 102D, 201D, 188D, 199D };

		Chart chart = new Chart(ChartType.BAR);
		chart.setWidth("100%");
		chart.setHeight("90%");
		// Modify the default configuration a bit
		Configuration conf = chart.getConfiguration();
		conf.setTitle("In dieser Kategorie bist du:");
		conf.setSubTitle(name);
		conf.getLegend().setEnabled(true); // Disable legend
		// The data

		ListSeries series = new ListSeries("Einnahmen");
		ListSeries series2 = new ListSeries("Ausgaben");
		series.setData(werte); // als DOUBLE Array
		series2.setData(test5);
		conf.addSeries(series);
		conf.addSeries(series2);
		// Set the category labels on the axis correspondingly
		XAxis xaxis = new XAxis();
		xaxis.setCategories(kategorien); // als String Array
		xaxis.setTitle("Kategorien");
		conf.addxAxis(xaxis);
		// Set the Y axis title
		YAxis yaxis = new YAxis();
		yaxis.setTitle("Euro");
		yaxis.getLabels().setFormatter(
				"function() {return Math.floor(this.value) + \'€\';}");
		yaxis.getLabels().setStep(2);
		conf.addyAxis(yaxis);
		return chart;
	}

	public int getCurrentTab() {
		if (ubersichtSheet.getSelectedTab() == einnahmenLayout)
			return 1;
		else if (ubersichtSheet.getSelectedTab() == gesamtLayout)
			return 2;
		else if (ubersichtSheet.getSelectedTab() == ausgabenLayout)
			return 3;
		else
			return 0;
	}

	private ListSelect selection() {
		// nativeSelect_1
		chartSelect = new ListSelect();
		chartSelect.setCaption("Chart Art");
		chartSelect.setImmediate(true);
		chartSelect.setWidth("-1px");
		chartSelect.setHeight("-1px");
		chartSelect.addValueChangeListener(new ValueChangeListener() {
			@Override
			public void valueChange(final ValueChangeEvent event) {
				final String valueString = String.valueOf(event.getProperty()
						.getValue());
				Notification.show("Value changed:", valueString,
						Type.TRAY_NOTIFICATION);
			}
		});
		fillSelect();
		return chartSelect;
	}




	public void wechselDichE(String[] kategorien, Double[] werte) {
		String[] test = { "Auto", "Bahn" };
		Double[] test2 = { 112D, 211D };
		String[] test3 = { "Auto", "Bahn", "Fahrrad", "Motorrad" };
		Double[] test4 = { 112D, 211D, 118D, 119D };

		Chart chart;

		chart = setChartBar(test3, test4, "Einnahmen");

		einnahmenLayout.addComponent(chart, "top:10.0%;left:0.0%;");
		
		einnahmenLayout.addComponent(new Button ("WechselE"), "top:92.0%;left:90.0%;");
		// Chart

		System.out.println("Einnahmen: value=" + chartSelect.getValue()
				+ " description=" + chartSelect.getDescription());
		System.out.println("Einnahmen is Selected: "
				+ chartSelect.isSelected("ZeitUberblick"));

	}

	public void wechselDichA(String[] strings, Double[] doubles) {
		Chart chart;
		String[] test = { "Auto", "Bahn" };
		Double[] test2 = { 112D, 211D };
		String[] test3 = { "Auto", "Bahn", "Fahrrad", "Motorrad" };
		Double[] test4 = { 312D, 211D, 318D, 419D };

		chart = setChartBar(test3, test4, "Ausgabenübersicht");
		// Chart
		
		ausgabenLayout.addComponent(chart, "top:10.0%;left:0.0%;");
		ausgabenLayout.addComponent(new Button("WechselA"), "top:92.0%;left:90.0%;");
	}

	public void wechselDichG(String[] strings, Double[] doubles) {
		Chart chart;
		String[] test = { "Auto", "Bahn" };
		Double[] test2 = { 112D, 211D };
		String[] test3 = { "Auto", "Bahn", "Fahrrad", "Motorrad" };
		Double[] test4 = { 112D, 411D, 118D, 119D };

		chart = setChartBar(test3, test4, "Gesamtübersicht");

		gesamtLayout.addComponent(chart, "top:10.0%;left:0.0%;");
	
		gesamtLayout.addComponent(new Button ("WechselG"), "top:92.0%;left:90.0%;");
	}
}
